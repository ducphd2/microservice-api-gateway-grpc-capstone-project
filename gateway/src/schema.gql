# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type ErrorPayload {
  field: String
  message: [String!]
}

type User {
  id: ID!
  createdAt: Int!
  updatedAt: Int!
  email: String!
  fullName: String!
  status: String!
  role: String!
  gender: String!
  contact: String!
  dobDay: Float!
  dobMonth: Float!
  dobYear: Float!
  occupation: String
  avatar: String
}

type UserPayload {
  errors: [ErrorPayload!]
  user: User
}

type Merchant {
  id: ID!
  createdAt: Int!
  updatedAt: Int!
  name: String!
  phone: String!
  address: String!
  cityCode: Int!
  districtCode: Int!
  wardCode: Int!
  profileId: Int!
}

type MerchantBranch {
  id: ID!
  createdAt: Int!
  updatedAt: Int!
  name: String!
  phone: String!
  address: String!
  cityCode: Int!
  districtCode: Int!
  wardCode: Int!
  profileId: Int!
  merchantId: Int!
}

type ImageCategory {
  id: ID!
  createdAt: Int!
  updatedAt: Int!
  name: String!
  imageUrl: String!
  description: String
}

type Category {
  id: ID!
  createdAt: Int!
  updatedAt: Int!
  name: String!
  code: String!
  image: ImageCategory
}

type Customer {
  id: ID!
  createdAt: Int!
  updatedAt: Int!
  email: String!
  fullName: String!
  status: String!
  role: String!
  gender: String!
  contact: String!
  dobDay: Int!
  dobMonth: Int!
  dobYear: Int!
  occupation: String
  avatar: String
}

type CustomerEdge {
  node: Customer!
  cursor: String!
}

type ResponseLoginGrpc {
  user: User!
  accessToken: String!
  refreshToken: String!
}

type ResponseRegisterGrpc {
  user: User!
  accessToken: String!
  refreshToken: String!
  merchant: Merchant!
  merchantBranch: MerchantBranch!
}

type Profile {
  id: ID!
  createdAt: Int!
  updatedAt: Int!
  userId: Int!
  fullName: String!
  phone: String!
  address: String!
  cityCode: Int!
  districtCode: Int!
  wardCode: Int!
  dateOfBirth: Int!
  monthOfBirth: Int!
  yearOfBirth: Int!
  type: ProfileType!
}

enum ProfileType {
  CUSTOMER
  EMPLOYEE
}

type UserFindByIdResponse {
  user: User!
  profile: Profile!
}

type FindAllBranches {
  merchantBranches: [MerchantBranch!]!
}

type FindAllCategories {
  categories: [Category!]!
}

type ResponseSingleUpload {
  url: String!
  format: String!
  folder: String!
  width: Float!
  height: Float!
  bytes: Float!
}

type Query {
  findOneMerchant(id: Float!): Merchant!
  getUser(id: Float!): User!
  findBranches: FindAllBranches!
  findBranchById(id: Float!): MerchantBranch!
  findCategories: FindAllCategories!
  findCategoryById(id: Float!): Category!
  item: String!
}

type Mutation {
  login(data: InputLoginRequest!): ResponseLoginGrpc!
  register(data: InputRegisterRequest!): ResponseRegisterGrpc!
  refreshToken: UserPayload!
  logout: Boolean!
  updatePassword(data: ChangePasswordInput!): UserFindByIdResponse!
  createBranch(data: BranchDto!): MerchantBranch!
  updateBranch(id: Float!, data: BranchDto!): MerchantBranch!
  deleteBranch(id: Float!): MerchantBranch!
  createCategory(data: CategoryDto!, setting: UploadParamInput, file: Upload): Category!
  updateCategory(id: Float!, data: CategoryDto!): Category!
  deleteCategory(id: Float!): Category!
  uploadSingleFiles(setting: UploadParamInput!, file: Upload!): ResponseSingleUpload!
  uploadMultipleFiles(setting: UploadParamInput!, files: [Upload!]!): [ResponseSingleUpload!]!
}

input InputLoginRequest {
  email: String!
  password: String!
}

input InputRegisterRequest {
  fullName: String!
  email: String!
  password: String!
  status: String!
  role: String!
  gender: String!
  contact: String!
  dobDay: Float!
  dobMonth: Float!
  dobYear: Float!
  occupation: String
  avatar: String
  confirmPassword: String!
  phone: String!
  merchantPhone: String!
  merchantName: String!
  merchantAddress: String!
  cityCode: Float!
  districtCode: Float!
  wardCode: Float!
  merchantSubdomain: String!
}

input ChangePasswordInput {
  currentPassword: String!
  newPassword: String!
  confirmPassword: String!
}

input BranchDto {
  name: String!
  phone: String!
  address: String!
  cityCode: Float!
  districtCode: Float!
  wardCode: Float!
  profileId: Float!
  merchantId: Float!
  createdAt: Float!
  updatedAt: Float!
}

input CategoryDto {
  name: String!
  code: String!
  imageUrl: String
}

input UploadParamInput {
  uploadService: EnumService!
  folder: String!
}

enum EnumService {
  Cloudinary
  S3Storage
  Web3Storage
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload