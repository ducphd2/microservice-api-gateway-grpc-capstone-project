# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type PageInfo {
  startCursor: String!
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type ErrorPayload {
  field: String
  message: [String!]
}

type DeletePayload {
  errors: [ErrorPayload!]
  count: Int
}

type Device {
  id: Int!
  createdAt: String!
  updatedAt: String!
  userId: ID!
  os: String!
  deviceId: String!
  token: String!
}

type DeviceEdge {
  node: Device!
  cursor: String!
}

type DeviceConnection {
  edges: [DeviceEdge!]!
  pageInfo: PageInfo!
}

type MerchantBranch {
  id: Int!
  createdAt: String!
  updatedAt: String!
  name: String!
  phone: String!
  address: String!
  cityCode: Int!
  districtCode: Int!
  wardCode: Int
  merchantId: Int!
  userId: Int!
}

type MerchantBranchEdge {
  node: MerchantBranch!
  cursor: String!
}

type MerchantBranchConnection {
  edges: [MerchantBranchEdge!]!
  pageInfo: PageInfo!
}

type MerchantBranchPayload {
  errors: [ErrorPayload!]
  branch: MerchantBranch
}

type Merchant {
  id: Int!
  createdAt: String!
  updatedAt: String!
  name: String!
  phone: String!
  address: String!
  cityCode: Int!
  districtCode: Int!
  wardCode: Int!
  userId: ID!
  branches(q: String, first: Float, last: Float, before: String, after: String, orderBy: String): MerchantBranchConnection!
}

type MerchantEdge {
  node: Merchant!
  cursor: String!
}

type MerchantConnection {
  edges: [MerchantEdge!]!
  pageInfo: PageInfo!
}

type User {
  id: Int!
  createdAt: String!
  updatedAt: String!
  email: String!
  fullName: String
  status: EUserStatus
  role: EUserRole!
  gender: EUserGender
  contact: String
  dobDay: Float
  dobMonth: Float
  dobYear: Float
  occupation: String
  avatar: String
  address: String
  cityCode: Float
  districtCode: Float
  merchants(q: String, first: Float, last: Float, before: String, after: String, orderBy: String): MerchantConnection!
  devices: DeviceConnection!
}

enum EUserStatus {
  active
  banned
}

enum EUserRole {
  super_admin
  admin
  user
}

enum EUserGender {
  male
  female
  other
}

type UserPayload {
  errors: [ErrorPayload!]
  user: User
}

type UserEdge {
  node: User!
  cursor: String!
}

type UsersConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

type CategoryImage {
  id: Int!
  createdAt: String!
  updatedAt: String!
  name: String!
  imageUrl: String!
  categoryId: ID!
  description: String
}

type ProductImage {
  id: Int!
  createdAt: String!
  updatedAt: String!
  name: String!
  imageUrl: String!
  productId: ID!
  description: String
}

type Product {
  id: Int!
  createdAt: String!
  updatedAt: String!
  code: String!
  name: String!
  description: String!
  sku: String
  qrCode: String
  quantity: Int!
  images: [ProductImage!]
}

type Category {
  id: Int!
  createdAt: String!
  updatedAt: String!
  name: String!
  code: String!
  images: [CategoryImage!]
  products: [Product!]
}

type Customer {
  id: Int!
  createdAt: String!
  updatedAt: String!
  level: ECustomerLevel!
  referrer: String
  referrerCode: String
  userId: Int
  branchId: Int
  customerCode: String
  facebook: String
  zaloPhone: String
  height: Int
  weight: Int
  memberCardNo: Int
  address: String
  cityCode: Int
  districtCode: Int
  company: String
  taxNo: String
  note: String
  relatedUser: String
  relatedUserRole: String
  relatedUserPhone: String
}

enum ECustomerLevel {
  normal
  silver
  gold
  platinum
}

type CustomersConnection {
  edges: [CustomerEdge!]!
  pageInfo: PageInfo!
}

type CustomerEdge {
  node: Customer!
  cursor: String!
}

type CustomerPayload {
  errors: [ErrorPayload!]
  user: User
  customer: Customer
}

type DeleteCustomerPayload {
  errors: [ErrorPayload!]
  count: Int
}

type CustomerRegisterPayload {
  errors: [ErrorPayload!]
  user: User
  customer: Customer
  accessToken: String!
  refreshToken: String!
}

type ResponseAuthGrpc {
  user: User!
  accessToken: String!
  refreshToken: String!
}

type CustomerLoginResponse {
  user: User!
  customer: Customer!
  accessToken: String!
  refreshToken: String!
}

type Booking {
  id: Int!
  createdAt: String!
  updatedAt: String!
  status: EBookingStatus!
  customerId: Int!
  branchServiceId: Int!
  merchantId: Int
  branchId: Int
  startTime: String!
  endTime: String!
  bookingDate: String!
  cancelReason: String
  isCustomerCancel: Boolean
  isAdminUpdate: Boolean
  adminUpdateId: Int
  note: String
}

enum EBookingStatus {
  PENDING
  APPROVE
  CANCELLED
}

type BookingPayload {
  errors: [ErrorPayload!]
  booking: Booking
}

type BookingEdge {
  node: Booking!
  cursor: String!
}

type DeleteBookingPayload {
  errors: [ErrorPayload!]
  count: Int
}

type BookingPaginationResponse {
  items: [Booking!]!
  page: Int!
  totalPage: Int!
  total: Int!
  limit: Int!
}

type UserBookingNotification {
  id: Int!
  createdAt: String!
  updatedAt: String!
  status: String
  customerId: Float
  branchServiceId: Float
  duration: Float
  startTime: String
  endTime: String
}

type UserBookingNotificationSubscription {
  notification: UserBookingNotification!
}

type BranchServiceGroup {
  id: Int!
  createdAt: String!
  updatedAt: String!
  name: String!
  description: String!
  image: String
  showType: Int!
  branchId: Int!
  merchantId: Int
}

type BranchServiceGroupEdge {
  node: BranchServiceGroup!
  cursor: String!
}

type BranchServiceGroupConnection {
  edges: [BranchServiceGroupEdge!]!
  pageInfo: PageInfo!
}

type BranchServiceGroupPayload {
  errors: [ErrorPayload!]
  branchServiceGroup: BranchServiceGroup
}

type BranchService {
  id: Int!
  createdAt: String!
  updatedAt: String!
  serviceGroupId: Int!
  price: Float!
  capitalPrice: Float
  durationHour: Int!
  durationMinute: Int!
  name: String!
  code: String!
  description: String
  image: String
  showType: Int!
  status: Int!
  canPrintHouseInInvoice: Boolean
  canEditPriceInPay: Boolean
  branchId: Int
  merchantId: Int
}

type BranchServiceEdge {
  node: BranchService!
  cursor: String!
}

type BranchServiceConnection {
  edges: [BranchServiceEdge!]!
  pageInfo: PageInfo!
}

type BranchServicePayload {
  errors: [ErrorPayload!]
  branchService: BranchService
}

type BranchServicePaginationResponse {
  items: [BranchService!]!
  page: Int!
  totalPage: Int!
  total: Int!
  limit: Int!
}

type FindAllCategories {
  categories: [Category!]!
}

type ResponseSingleUpload {
  url: String!
  format: String!
  folder: String!
  width: Float!
  height: Float!
  bytes: Float!
}

type Query {
  findMerchantById(id: Float!): Merchant!
  findAllMerchants(q: String, first: Float, last: Float, before: String, after: String, orderBy: String): MerchantConnection!
  findAllMerchantsByAdmin(q: String, first: Float, last: Float, before: String, after: String, orderBy: String): MerchantConnection!
  findMerchantBranchById(id: Float!): MerchantBranch!
  findAllBranchesByMerchant(merchantId: Float!, q: String, first: Float, last: Float, before: String, after: String, orderBy: String): MerchantBranchConnection!
  findAllBranchesByAdmin(q: String, first: Float, last: Float, before: String, after: String, orderBy: String): MerchantBranchConnection!
  getUsers(q: String, first: Float, last: Float, before: String, after: String, orderBy: String): UsersConnection!
  getUser(id: Float!): User!
  userCount(q: String): Float!
  me: User!
  findCategories: FindAllCategories!
  findCategoryById(id: Float!): Category!
  getAllCustomer(q: String, first: Float, last: Float, before: String, after: String, orderBy: String): CustomersConnection!
  getCustomerById(id: Int!): Customer!
  findAllBookingByMerchant(q: String, limit: Float, page: Float, orderBy: String, orderDirection: String): BookingPaginationResponse!
  findBookingById(id: Float!): BookingPayload!
  findBranchServiceById(id: Float!): BranchService!
  findAllBranchServices(q: String, first: Float, last: Float, before: String, after: String, orderBy: String): BranchServiceConnection!
  findAllBranchServicesByMerchant(merchantId: Float!, q: String, limit: Float, page: Float, orderBy: String, orderDirection: String): BranchServicePaginationResponse!
  customerFindAllServices(q: String, limit: Float, page: Float, orderBy: String, orderDirection: String): BranchServicePaginationResponse!
  findBranchServiceGroupById(id: Float!): BranchServiceGroup!
  findAllServiceGroups(q: String, first: Float, last: Float, before: String, after: String, orderBy: String): BranchServiceGroupConnection!
}

type Mutation {
  login(data: InputLoginRequest!): ResponseAuthGrpc!
  customerLogin(data: InputLoginRequest!): CustomerLoginResponse!
  register(data: InputRegisterRequest!): ResponseAuthGrpc!
  refreshToken: UserPayload!
  logout: Boolean!
  findMerchantById(id: Float!): Merchant!
  createBranch(data: CreateBranchInput!): MerchantBranchPayload!
  updateBranch(id: Float!, data: PartialUpdateBranch!): MerchantBranchPayload!
  deleteBranch(id: Float!): DeletePayload!
  updatePassword(data: ChangePasswordInput!): User!
  createCategory(data: CategoryDto!, file: Upload, folder: String): Category!
  updateCategory(id: Float!, data: CategoryDto!): Category!
  deleteCategory(id: Float!): Category!
  uploadSingleFiles(file: Upload!, folder: String): ResponseSingleUpload!
  uploadMultipleFiles(folder: String, files: [Upload!]!): [ResponseSingleUpload!]!
  createCustomer(userInput: UserInput!, customerInput: CreateCustomerInput!): CustomerPayload!
  registerCustomer(data: RegisterCustomer!): CustomerRegisterPayload!
  updateCustomer(id: Float!, data: TestUpdateDto!): CustomerPayload!
  deleteCustomer(id: Float!): DeleteCustomerPayload!
  createBooking(data: CreateBookingInput!): BookingPayload!
  customerCreateBooking(data: CustomerCreateBookingInput!): BookingPayload!
  updateBooking(id: Float!, data: PartialUpdateBooking!): BookingPayload!
  deleteBooking(id: Float!): DeleteBookingPayload!
  adminUpdateBooking(id: Float!, data: PartialUpdateBooking!): BookingPayload!
  createBranchService(data: CreateBranchServiceInput!): BranchServicePayload!
  updateBranchService(id: Float!, data: PartialUpdateBranchService!): BranchServicePayload!
  deleteBranchService(id: Float!): DeletePayload!
  createBranchServiceGroup(data: CreateBranchServiceGroupInput!): BranchServiceGroupPayload!
  updateBranchServiceGroup(id: Float!, data: PartialUpdateBranchServiceGroup!): BranchServiceGroupPayload!
  deleteBranchServiceGroup(id: Float!): DeletePayload!
}

input InputLoginRequest {
  email: String!
  password: String!
  device: DeviceInputDto
}

input DeviceInputDto {
  os: EDeviceOs!
  deviceId: String!
  token: String!
}

enum EDeviceOs {
  android
  ios
}

input InputRegisterRequest {
  fullName: String!
  email: String!
  password: String!
  status: EUserStatus!
  role: EUserRole!
  gender: EUserGender!
  contact: String!
  dobDay: Int
  dobMonth: Int
  dobYear: Int
  occupation: String
  avatar: String
  address: String
  cityCode: Float!
  districtCode: Float!
  confirmPassword: String!
  phone: String!
  merchantPhone: String!
  merchantName: String!
  merchantAddress: String!
  wardCode: Float!
  merchantSubdomain: String!
  deviceId: String
  os: EDeviceOs
  token: String
}

input CreateBranchInput {
  name: String!
  phone: String!
  address: String!
  merchantId: Int!
  userId: Int!
  cityCode: Int!
  districtCode: Int!
  wardCode: Float
}

input PartialUpdateBranch {
  name: String
  phone: String
  address: String
  merchantId: Int
  userId: Int
  cityCode: Int
  districtCode: Int
  wardCode: Float
}

input ChangePasswordInput {
  currentPassword: String!
  newPassword: String!
  confirmPassword: String!
}

input CategoryDto {
  name: String!
  code: String!
  imageUrl: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UserInput {
  fullName: String
  email: String!
  password: String!
  gender: EUserGender
  contact: String
  dobDay: Int
  dobMonth: Int
  dobYear: Int
  occupation: String
  avatar: String
  address: String
  cityCode: Int
  districtCode: Int
  status: EUserStatus = active
  role: EUserRole = user
}

input CreateCustomerInput {
  branchId: Int!
  level: String
  referrer: String
  referrerCode: String
  customerCode: String
  facebook: String
  zaloPhone: String
  height: Int
  weight: Int
  memberCardNo: String
  company: String
  taxNo: String
  note: String
  relatedUser: String
  relatedUserRole: String
  relatedUserPhone: String
}

input RegisterCustomer {
  email: String!
  password: String!
}

input TestUpdateDto {
  userInput: UpdateUserInputDto!
  customerInput: PartialUpdateCustomer!
}

input UpdateUserInputDto {
  fullName: String
  email: String
  password: String
  status: EUserStatus
  role: EUserRole
  gender: EUserGender
  contact: String
  dobDay: Int
  dobMonth: Int
  dobYear: Int
  occupation: String
  avatar: String
  address: String
  cityCode: Int
  districtCode: Int
}

input PartialUpdateCustomer {
  branchId: Int
  level: String
  referrer: String
  referrerCode: String
  customerCode: String
  facebook: String
  zaloPhone: String
  height: Int
  weight: Int
  memberCardNo: String
  company: String
  taxNo: String
  note: String
  relatedUser: String
  relatedUserRole: String
  relatedUserPhone: String
}

input CreateBookingInput {
  status: EBookingStatus!
  customerId: Int!
  branchServiceId: Int!
  duration: Int!
  startTime: String!
  endTime: String!
  adminBranchEmail: String!
  customerEmail: String!
  customerName: String!
}

input CustomerCreateBookingInput {
  branchServiceId: Int!
  note: String
  bookingDate: String!
  startTime: String!
  endTime: String!
}

input PartialUpdateBooking {
  status: EBookingStatus!
  customerId: Int
  branchServiceId: Int
  duration: Int
  startTime: String
  endTime: String
  adminBranchEmail: String
  customerEmail: String
  customerName: String
  cancelReason: String
  isCustomerCancel: Boolean
  isAdminUpdate: Boolean
  adminUpdateId: Int
}

input CreateBranchServiceInput {
  serviceGroupId: Int!
  price: Float!
  capitalPrice: Float
  durationHour: Int!
  durationMinute: Int!
  name: String!
  code: String!
  description: String
  canEditPriceInPay: Boolean
  image: String
  showType: EBranchServiceShowType!
  status: EBranchServiceStatus!
  canPrintHouseInInvoice: Boolean
}

enum EBranchServiceShowType {
  both_in_screen
  only_cashier
  only_booking
  not_at_all
}

enum EBranchServiceStatus {
  active
  pending
}

input PartialUpdateBranchService {
  serviceGroupId: Int
  price: Float
  capitalPrice: Float
  durationHour: Int
  durationMinute: Int
  name: String
  code: String
  description: String
  canEditPriceInPay: Boolean
  image: String
  showType: EBranchServiceShowType
  status: EBranchServiceStatus
  canPrintHouseInInvoice: Boolean
}

input CreateBranchServiceGroupInput {
  name: String!
  description: String!
  image: String
  showType: EBranchServiceShowType!
  branchId: Int!
}

input PartialUpdateBranchServiceGroup {
  name: String
  description: String
  image: String
  showType: EBranchServiceShowType
  branchId: Int
}

type Subscription {
  pushNotificationByGatewayViaSubscription: UserBookingNotificationSubscription!
}