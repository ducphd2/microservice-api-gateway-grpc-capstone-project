syntax = "proto3";

package customer;

import "commons.proto";
import "user.proto";

message Customer {
  int32 id = 1;
  optional int32 userId = 2;
  optional string level = 3;
  optional int32 branchId = 4;
  optional string createdAt = 5;
  optional string updatedAt = 6;
  optional string referrer = 7;
  optional string referrerCode = 8;
  optional string customerCode = 9;
  optional string facebook = 10;
  optional string zaloPhone = 11;
  optional int32 height = 12;
  optional int32 weight = 13;
  optional string memberCardNo = 14;
  optional string company = 15;
  optional string taxNo = 16;
  optional string note = 17;
  optional string relatedUser = 18;
  optional string relatedUserRole = 19;
  optional string relatedUserPhone = 20;
}

message CustomerInput {
  string level = 1;
  int32 branchId = 2;
  optional string referrer = 3;
  optional string referrerCode = 4;
  optional string customerCode = 5;
  optional string facebook = 6;
  optional string zaloPhone = 7;
  optional int32 height = 8;
  optional int32 weight = 9;
  optional string memberCardNo = 10;
  optional string company = 11;
  optional string taxNo = 12;
  optional string note = 13;
  optional string relatedUser = 14;
  optional string relatedUserRole = 15;
  optional string relatedUserPhone = 16;
}

message RegisterCustomerInput {
  string email = 1;
  string password = 2;
}

message CreateCustomerInput {
  user.CreateUserInput userInput = 1;
  CustomerInput customerInput = 2;
}

message UpdateCustomerInput {
  int32 id = 1;
  CreateCustomerInput data = 2;
}

message CustomerEdge {
  Customer node = 1;
  string cursor = 2;
}

message FindCustomersPayload {
  repeated CustomerEdge edges = 1;
  commons.PageInfo pageInfo = 2;
}

message RegisterCustomerResponse {
  Customer customer = 1;
  user.User user = 2;
}

service CustomerServiceGrpc {
  rpc find (commons.Query) returns (FindCustomersPayload) {}
  rpc findById (commons.Id) returns (Customer) {}
  rpc findOne (commons.Query) returns (Customer) {}
  rpc count (commons.Query) returns (commons.Count) {}
  rpc create (CreateCustomerInput) returns (Customer) {}
  rpc register (RegisterCustomerInput) returns (RegisterCustomerResponse) {}
  rpc update (UpdateCustomerInput) returns (Customer) {}
  rpc destroy (commons.Query) returns (commons.Count) {}
}
